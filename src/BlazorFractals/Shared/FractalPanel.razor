@using ApplicationCore.Helpers
@using ApplicationCore.Maths
@using ApplicationCore.Media
@using SixLabors.ImageSharp.ColorSpaces.Conversion
@using SixLabors.ImageSharp.PixelFormats
@using System.Numerics
@using System.Threading
@using ApplicationCore.Exceptions
@using ApplicationCore.Extensions
@using ApplicationCore.Fractals
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Primitives
@inject HttpClient Http
@inject NavigationManager NavigationManager

<div class="container">

    <form>
        <fieldset disabled="@_isGenerating">
            <div class="form-row">
                <div class="form-group col-md-4">
                    <label for="inputExpression">Expression</label>
                    <input type="text" class="form-control disabled" id="inputExpression" placeholder="Expression" @bind="_options.Expression"/>
                    <small class="form-text text-muted">More complex expressions will take longer to process</small>
                </div>
                <div class="form-group col-md-4">
                    <label for="inputMultiplicity">Multiplicity</label>
                    <div class="input-group" id="inputMultiplicity">
                        <input type="text" class="form-control" placeholder="Real Part" @bind="_multiplicityReal"/>
                        <div class="input-group-prepend">
                            <div class="input-group-text">+</div></div>
                        <input type="text" class="form-control" placeholder="Imaginary Part" @bind="_multiplicityImaginary"/>
                        <div class="input-group-append">
                            <div class="input-group-text">i</div></div>
                    </div>
                    <small class="form-text text-muted">Values different from (1,0) create interesting fractal variations but can need significantly more steps to converge</small>
                </div>
                <div class="form-group col-md-4">
                    <label for="inputSize">Image size</label>
                    <div class="input-group" id="inputSize">
                        <div class="input-group-prepend">
                            <div class="input-group-text">Width</div></div>
                        <input type="text" class="form-control" placeholder="Width" @bind="_options.PixelSize.Width"/>
                        <div class="input-group-prepend">
                            <div class="input-group-text">Height</div></div>
                        <input type="text" class="form-control" placeholder="Height" @bind="_options.PixelSize.Height"/>
                    </div>
                    <small class="form-text text-muted">Processing time greatly increases with image size</small>
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-4">
                    <label for="inputColor">Background color</label>
                    <div class="input-group" id="inputColor">
                        <div class="input-group-prepend">
                            <div class="input-group-text">@_color</div></div>
                        <input type="color" class="form-control" placeholder="Background color" @bind="_color"/>
                    </div>
                    <small class="form-text text-muted">This gets used in non-converged areas</small>
                </div>
                <div class="form-group col-md-4">
                    <label for="inputRealSize">Real bounds</label>
                    <div class="input-group" id="inputRealSize">
                        <div class="input-group-prepend">
                            <div class="input-group-text">Min</div></div>
                        <input type="text" class="form-control" placeholder="Min X" @bind="_options.DomainSize.MinX"/>
                        <div class="input-group-prepend">
                            <div class="input-group-text">Max</div></div>
                        <input type="text" class="form-control" placeholder="Max X" @bind="_options.DomainSize.MaxX"/>
                    </div>
                    <small class="form-text text-muted">The fractal will cover this domain in the real (x) axis</small>
                </div>
                <div class="form-group col-md-4">
                    <label for="inputImaginarySize">Imaginary bounds</label>
                    <div class="input-group" id="inputImaginarySize">
                        <div class="input-group-prepend">
                            <div class="input-group-text">Min</div></div>
                        <input type="text" class="form-control" placeholder="Min Y" @bind="_options.DomainSize.MinY"/>
                        <div class="input-group-prepend">
                            <div class="input-group-text">Max</div></div>
                        <input type="text" class="form-control" placeholder="Max Y" @bind="_options.DomainSize.MaxY"/>
                    </div>
                    <small class="form-text text-muted">The fractal will cover this domain in the imaginary (y) axis</small>
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-3">
                    <label for="inputIterations">Max iterations</label>
                    <input type="text" class="form-control" id="inputIterations" placeholder="Max iterations" @bind="_options.MaxIterations"/>
                    <small class="form-text text-muted">If this is exceeded, the background color will be used instead for that pixel</small>
                </div>
                <div class="form-group col-md-2">
                    <label for="inputPrecision">Precision</label>
                    <input type="text" class="form-control" id="inputPrecision" placeholder="Precision" @bind="_options.Precision"/>
                    <small class="form-text text-muted">Target error for converging to a solution</small>
                </div>
                <div class="form-group col-md-2">
                    <label for="inputDepth">Depth</label>
                    <input type="text" class="form-control" id="inputDepth" placeholder="Depth" @bind="_options.Depth"/>
                    <small class="form-text text-muted">Rate of change in brightness per iteration (can be negative)</small>
                </div>
                <div class="form-group col-md-3">
                    <label for="inputThreshold">Threshold</label>
                    <input type="text" class="form-control" id="inputThreshold" placeholder="Precision" @bind="_options.Threshold"/>
                    <small class="form-text text-muted">Depth will only be taken into account after this amount of iterations</small>
                </div>
                <div class="form-group col-md-2">
                    <label for="inputGradient">Gradient</label>
                    <input type="text" class="form-control" id="inputGradient" placeholder="Precision" @bind="_options.Gradient"/>
                    <small class="form-text text-muted">Factor to smoothen depth boundaries</small>
                </div>
            </div>
            
            <div class="card card-body mb-4">
                <div class="row">
                    <h5 class="card-title col-md-4">Predefined colors</h5>
                    <div class="col-md-8 text-right">
                        <button class="btn btn-info" type="button" @onclick="AddColorSpec">Add color</button>
                        <button class="btn btn-info" type="button" @onclick="LoadSpecs">Load from last result</button>
                        <button class="btn btn-info" type="button" @onclick="ClearAllColorSpecs">Clear all</button>
                    </div>
                </div>
                <p class="card-text mt-2">
                    This list defines the colors to be used for each root found when generating the fractal image.
                    If a specific root does not appear in this list, a random color will be assigned.
                </p>
                <p class="card-text">
                    Specifying a root manually might cause issues due to the precision needed. To ensure these are 
                    specified correctly, it is recommended to generate a temporary fractal first, load the roots / 
                    colors from that result, and then ajust the colors accordingly.
                </p>
                @foreach (var spec in _options.ColorSpecs)
                {
                    <div class="row">
                        <div class="form-group col-md-5">
                            <div class="input-group">
                                <input type="text" class="form-control" placeholder="Real Part" @bind="spec.Real"/>
                                <div class="input-group-prepend"><div class="input-group-text">+</div></div>
                                <input type="text" class="form-control" placeholder="Imaginary Part" @bind="spec.Imaginary"/>
                                <div class="input-group-append"><div class="input-group-text">i</div></div>
                            </div>
                        </div>
                        <div class="form-group col-md-5">
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <div class="input-group-text">@spec.Color</div></div>
                                <input type="color" class="form-control" placeholder="Background color" @bind="spec.Color"/>
                            </div>
                        </div>
                        <div class="form-group col-md-2 text-right">
                            <button class="btn btn-danger" type="button" @onclick="() => DeleteSpec(spec)">Delete</button>
                        </div>
                    </div>
                }
            </div>
        </fieldset>
        
        @if (_isGenerating)
        {
            <div class="form-row">
                <div class="form-text col-md-10">Generating fractal image; please wait...</div>
                <button class="btn btn-danger col-md-2" type="button" @onclick="CancelGeneration">Cancel</button>
            </div>
        }
        else
        {
            <div class="form-row">
                <div class="form-text col-md-8" style="color: red; font-weight: bold;">@_errorMessage</div>
                <div class="form-check col-md-2">
                    <input class="form-check-input" type="checkbox" id="inputLocally" @bind="_executeLocally">
                    <label class="form-check-label" for="inputLocally">Run on browser</label>
                </div>
                <button class="btn btn-primary col-md-2" type="button" @onclick="GenerateImageAsync">Generate</button>
            </div>
        }
    </form>

    @if (_parsedExpression != null)
    {
        <div class="card m-4">
            <div class="card-body">
                <p class="card-text">
                    <b>Parsed expression:</b> @_parsedExpression
                </p>
                @if (_uri != null)
                {
                    <p class="card-text">
                        <b>Full URL:</b> @_uri
                    </p>
                }
            </div>
            @if (_imageSource != null)
            {
                <img class="card-img-bottom" src="@_imageSource" alt="Generated fractal"/>
            }
        </div>
    }
</div>

@code
{
    private const string RootUrl = 
#if DEBUG
        @"http://localhost:7071/api/";
#else
        @"https://fractalgenerator.azurewebsites.net/api/";
#endif

    private bool _isGenerating = false;

    private CancellationTokenSource _cancellation;
    
    private FractalOptions _options = new FractalOptions
    {
        Expression = "z^3+1",
        Depth = 15,
        Gradient = 0.25f,
        ColorSpecs = new List<HexColorSpec>(),
    };

    private bool _executeLocally = true;
    
    private double _multiplicityReal = 1;

    private double _multiplicityImaginary = 0;
    
    private string _parsedExpression;
    
    private string _color = "#000000";

    private string _errorMessage;
    
    private string _imageSource;

    private string _uri;
    
    private ICollection<HexColorSpec> _resultSpecs;

    protected override void OnInitialized()
    {
        ParseUri();
    }

    private void ParseUri()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var dict = QueryHelpers.ParseQuery(uri.Query);
        if (dict.TryGetValue("expression", out var token))
        {
            _options.Expression = token.First();
        }

        if (dict.TryGetValue("m", out token))
        {
            var parts = token.First().Split(';');
            
            if (parts.Length > 0 && double.TryParse(parts[0], out var real))
            {
                _multiplicityReal = real;
            }
            
            if (parts.Length > 1 && double.TryParse(parts[1], out var imaginary))
            {
                _multiplicityImaginary = imaginary;
            }
        }

        if (dict.TryGetValue("size", out token))
        {
            var parts = token.First().Split(';');
            if (parts.Length == 1 && int.TryParse(parts[0], out var size))
            {
                _options.PixelSize.Width = size;
                _options.PixelSize.Height = size;
            }
            else if (parts.Length == 2 && int.TryParse(parts[0], out var width) && int.TryParse(parts[1], out var height))
            {
                _options.PixelSize.Width = width;
                _options.PixelSize.Height = height;
            }
        }
        
        if (dict.TryGetValue("bounds", out token))
        {
            var parts = token.First().Split(';');
            if (parts.Length == 4
                && double.TryParse(parts[0], out var minX)
                && double.TryParse(parts[1], out var maxX)
                && double.TryParse(parts[2], out var minY)
                && double.TryParse(parts[3], out var maxY))
            {
                _options.DomainSize.MinX = minX;
                _options.DomainSize.MaxX = maxX;
                _options.DomainSize.MinY = minY;
                _options.DomainSize.MaxY = maxY;
            }
        }

        ParseInt(dict, "iterations", x => _options.MaxIterations = x);
        ParseDouble(dict, "precision", x => _options.Precision = x);
        ParseFloat(dict, "depth", x => _options.Depth = x);
        ParseInt(dict, "threshold", x => _options.Threshold = x);
        ParseFloat(dict, "gradient", x => _options.Gradient = x);

        StateHasChanged();
    }
    
    private void GenerateUri()
    {
        var dict = new Dictionary<string, string>
        {
            ["expression"] = _options.Expression,
            ["m"] = $"{_options.Multiplicity.Real};{_options.Multiplicity.Imaginary}",
            ["size"] = $"{_options.PixelSize.Width};{_options.PixelSize.Height}",
            ["bounds"] = $"{_options.DomainSize.MinX};{_options.DomainSize.MaxX};{_options.DomainSize.MinY};{_options.DomainSize.MaxY}",
            ["iterations"] = $"{_options.MaxIterations}",
            ["precision"] = $"{_options.Precision}",
            ["depth"] = $"{_options.Depth}",
            ["threshold"] = $"{_options.Threshold}",
            ["gradient"] = $"{_options.Gradient}",
        };
        
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.BaseUri).ToString();
        if (!uri.EndsWith("/"))
        {
            uri += "/";
        }
        
        _uri = QueryHelpers.AddQueryString(uri, dict);
    }

    private async Task GenerateImageAsync()
    {
        _errorMessage = null;
        
        // Preliminary check to better capture parse errors. This means the parsing takes place
        // twice, but it is not the most time-consuming operation by far
        try
        {
            var element = MathElement.Parse(_options.Expression);
            _parsedExpression = element.ToString();
        }
        catch (ParseException ex)
        {
            _errorMessage = $"Parse error: {ex.Message}";
            _parsedExpression = null;
            _imageSource = null;
            _resultSpecs = null;
            return;
        }

        _options.Multiplicity = new Complex(_multiplicityReal, _multiplicityImaginary);

        var converter = new ColorSpaceConverter();
        _options.FillColor = converter.ToHsv(Rgba32.ParseHex(_color));

        if (_executeLocally)
        {
            await GenerateLocally();
        }
        else
        {
            await GenerateInFunction();
        }
        
        GenerateUri();
    }

    private async Task GenerateLocally()
    {
        _isGenerating = true;
        var generator = new LocalFractalGenerator(_options);
        await Task.Yield();
        var fractal = await generator.GenerateAsync();
        await Task.Yield();
        var image = ImageUtils.GenerateImage(fractal.Contents);
        await Task.Yield();
        var webImage = image.ToWebImage();
        _imageSource = webImage.Source;
        _resultSpecs = fractal.ColorSpecs.AsHexSpecs().ToList();
        _isGenerating = false;
    }

    private async Task GenerateInFunction()
    {
        _cancellation = new CancellationTokenSource();
        _isGenerating = true;
        StateHasChanged();
        
        var response = await Http.PostAsJsonAsync($"{RootUrl}RunOrchestrated", _options, _cancellation.Token);
        _cancellation?.Dispose();
        _cancellation = null;

        var result = await response.Content.ReadFromJsonAsync<FunctionResult>();

        if (string.IsNullOrEmpty(result.ErrorMessage))
        {
            _imageSource = result.ImageSource;
            _resultSpecs = result.ColorSpecs;
        }
        else
        {
            _errorMessage = result.ErrorMessage;
            _imageSource = null;
            _resultSpecs = null;
        }
        
        _isGenerating = false;
        StateHasChanged();
    }

    private void CancelGeneration()
    {
        _cancellation?.Cancel();
        _cancellation?.Dispose();
        _cancellation = null;
        _isGenerating = false;
        StateHasChanged();
    }

    private void AddColorSpec()
    {
        var rnd = new Random();
        _options.ColorSpecs.Add(new HexColorSpec
        {
            Color = $"#{rnd.NextByte():x2}{rnd.NextByte():x2}{rnd.NextByte():x2}",
        });
        StateHasChanged();
    }

    private void ClearAllColorSpecs()
    {
        _options.ColorSpecs.Clear();
        StateHasChanged();
    }

    private void LoadSpecs()
    {
        _options.ColorSpecs.Clear();
        foreach (var spec in _resultSpecs ?? Enumerable.Empty<HexColorSpec>())
        {
            _options.ColorSpecs.Add(spec);
        }
        
        StateHasChanged();
    }

    private void DeleteSpec(HexColorSpec spec)
    {
        _options.ColorSpecs.Remove(spec);
        StateHasChanged();
    }

    private static void ParseInt(IDictionary<string, StringValues> dict, string key, Action<int> action)
    {
        if (!dict.TryGetValue(key, out var token))
        {
            return;
        }

        if (!int.TryParse(token.First(), out var i))
        {
            return;
        }

        action(i);
    }
    
    private static void ParseDouble(IDictionary<string, StringValues> dict, string key, Action<double> action)
    {
        if (!dict.TryGetValue(key, out var token))
        {
            return;
        }

        if (!double.TryParse(token.First(), out var d))
        {
            return;
        }

        action(d);
    }
    
    private static void ParseFloat(IDictionary<string, StringValues> dict, string key, Action<float> action)
    {
        if (!dict.TryGetValue(key, out var token))
        {
            return;
        }

        if (!float.TryParse(token.First(), out var d))
        {
            return;
        }

        action(d);
    }
}
